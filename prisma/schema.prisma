// schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
  engineType = "binary"
}


model Ticket {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  authorName      String
  challenge String @default("Challenge A")
  issue     String
  location  String
  contact   String
  publishTime DateTime @default(now())
  claimedTime DateTime?
  resolvedTime DateTime?
  claimant User? @relation(name: "claim", fields: [claimantId], references: [id])
  claimantId String? @unique
  claimantName String?
  author    User   @relation(fields: [authorId], references: [id])
  authorId  String  @unique
}

model ResolvedTicket {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  authorName      String
  challenge String @default("Challenge A")
  issue     String
  location  String
  contact   String
  publishTime DateTime @default(now())
  claimedTime DateTime?
  resolvedTime DateTime?
  claimantId String? 
  claimantName String?
  authorId  String 
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean @default(false)
  mentor        Boolean @default(false)
  claimedTicketId String?
  claimedTicket Ticket? @relation(name: "claim")
  ticket        Ticket?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
